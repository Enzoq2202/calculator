import streamlit as st
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from typing import Tuple
import logging
import seaborn as sns
import re

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def capturar_parametros(ticker: str, periodo: str = '1y') -> Tuple[float, float, float, pd.DataFrame]:
    """
    Captura par√¢metros do ativo usando dados hist√≥ricos do Yahoo Finance.
    
    Args:
        ticker: S√≠mbolo da a√ß√£o (ex: AAPL, ITUB3.SA)
        periodo: Per√≠odo de dados hist√≥ricos (default: '1y')
    
    Returns:
        Tuple contendo (pre√ßo atual, retorno m√©dio, volatilidade, dados hist√≥ricos)
    """
    if not ticker or not re.match(r'^[A-Z0-9.]+$', ticker):
        raise ValueError("Ticker inv√°lido. Use formato como 'AAPL' ou 'ITUB3.SA'.")
    
    try:
        dados = yf.download(ticker, period=periodo)
        if dados.empty:
            raise ValueError(f"Nenhum dado encontrado para o ticker {ticker}")
            
        dados['Retornos'] = dados['Close'].pct_change().apply(np.log1p)
        dados = dados.dropna()
        
        S0 = dados['Close'].iloc[-1].item()
        mu = dados['Retornos'].mean() * 252
        sigma = dados['Retornos'].std() * np.sqrt(252)
        
        return S0, mu, sigma, dados
    except Exception as e:
        logger.error(f"Erro ao capturar par√¢metros: {str(e)}")
        raise

def monte_carlo_opcao_europeia(
    S0: float, 
    K: float, 
    T: float, 
    r: float, 
    sigma: float, 
    n_sim: int = 10000
) -> float:
    """
    Calcula o pre√ßo de uma op√ß√£o europeia usando simula√ß√£o Monte Carlo.
    
    Args:
        S0: Pre√ßo atual do ativo
        K: Pre√ßo de exerc√≠cio
        T: Tempo at√© expira√ß√£o (em anos)
        r: Taxa livre de risco
        sigma: Volatilidade
        n_sim: N√∫mero de simula√ß√µes
    
    Returns:
        Pre√ßo estimado da op√ß√£o
    """
    Z = np.random.standard_normal(n_sim)
    ST = S0 * np.exp((r - 0.5 * sigma ** 2) * T + sigma * np.sqrt(T) * Z)
    payoff = np.maximum(ST - K, 0)
    return np.exp(-r * T) * np.mean(payoff)

def monte_carlo_opcao_asiatica(
    S0: float, 
    K: float, 
    T: float, 
    r: float, 
    sigma: float, 
    n_sim: int = 10000, 
    n_steps: int = 252
) -> float:
    """
    Calcula o pre√ßo de uma op√ß√£o asi√°tica usando simula√ß√£o Monte Carlo.
    
    Args:
        S0: Pre√ßo atual do ativo
        K: Pre√ßo de exerc√≠cio
        T: Tempo at√© expira√ß√£o (em anos)
        r: Taxa livre de risco
        sigma: Volatilidade
        n_sim: N√∫mero de simula√ß√µes
        n_steps: N√∫mero de passos na simula√ß√£o
    
    Returns:
        Pre√ßo estimado da op√ß√£o
    """
    dt = T / n_steps
    Z = np.random.normal(size=(n_sim, n_steps))
    prices = S0 * np.exp(np.cumsum((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z, axis=1))
    media = np.mean(prices, axis=1)
    payoffs = np.maximum(media - K, 0)
    return np.exp(-r * T) * np.mean(payoffs)

def plot_trajetorias(
    S0: float, 
    T: float, 
    r: float, 
    sigma: float, 
    n_sim: int = 100, 
    n_traj: int = 20,
    n_steps: int = 252
) -> plt.Figure:
    """
    Gera um gr√°fico moderno e limpo com simula√ß√µes de trajet√≥rias de pre√ßo.
    
    Args:
        S0: Pre√ßo inicial do ativo
        T: Tempo at√© expira√ß√£o (em anos)
        r: Taxa livre de risco
        sigma: Volatilidade
        n_sim: N√∫mero total de simula√ß√µes
        n_traj: N√∫mero de trajet√≥rias a exibir
        n_steps: N√∫mero de passos na simula√ß√£o
    
    Returns:
        Figura Matplotlib com as trajet√≥rias plotadas
    """
    logger.info("Gerando gr√°fico Monte Carlo...")
    plt.style.use('default')
    sns.set_context("notebook", font_scale=1.2)
    
    dt = T / n_steps
    n_steps = int(T * 252)
    paths = np.zeros((n_steps + 1, n_sim))
    paths[0] = S0
    for t in range(1, n_steps + 1):
        Z = np.random.standard_normal(n_sim)
        paths[t] = paths[t-1] * np.exp((r - 0.5 * sigma ** 2) * dt + sigma * np.sqrt(dt) * Z)
    
    fig = plt.figure(figsize=(12, 7), dpi=100)
    ax = fig.add_subplot(111)
    
    # Plotar trajet√≥rias com uma paleta de cores mais suave
    for i in range(min(n_sim, n_traj)):
        ax.plot(paths[:, i], color=sns.color_palette("cool", n_colors=n_traj)[i], 
                alpha=0.3, linewidth=0.8)
    
    # Plotar m√©dia das trajet√≥rias
    media = paths.mean(axis=1)
    ax.plot(media, color='#FF6F61', linewidth=2.5, label='M√©dia das Trajet√≥rias', zorder=10)
    from matplotlib.patheffects import withStroke
    ax.get_lines()[-1].set_path_effects([withStroke(linewidth=4, foreground='black', alpha=0.15)])
    
    # Linha do pre√ßo inicial
    ax.axhline(S0, color='#B0BEC5', linestyle='--', alpha=0.6, label=f'Pre√ßo Inicial ($ {S0:.2f})')
    
    # Configura√ß√µes visuais modernas
    ax.set_title('Simula√ß√£o Monte Carlo - Trajet√≥rias de Pre√ßo', 
                 fontsize=16, pad=15, fontweight='medium', color='#263238')
    ax.set_xlabel('Dias', fontsize=12, color='#455A64')
    ax.set_ylabel('Pre√ßo ($)', fontsize=12, color='#455A64')
    
    # Grid suave
    ax.grid(True, linestyle='--', alpha=0.2, color='#CFD8DC')
    
    # Legenda sem borda
    ax.legend(loc='upper left', frameon=False, fontsize=10)
    
    # Anota√ß√£o para pre√ßo final m√©dio com fundo suave
    ax.annotate(f'M√©dia Final: ${media[-1]:.2f}', 
                xy=(n_steps, media[-1]), 
                xytext=(n_steps-50, media[-1]+S0*0.05),
                arrowprops=dict(facecolor='#455A64', arrowstyle='->', linewidth=1),
                fontsize=10, color='#263238', 
                bbox=dict(facecolor='white', alpha=0.9, edgecolor='none'))
    
    ax.margins(y=0.1)
    fig.tight_layout()
    
    return fig

def main():
    """Fun√ß√£o principal que alterna entre as p√°ginas Calculadora e Simula√ß√µes."""
    st.set_page_config(
        page_title="Calculadora de Op√ß√µes",
        page_icon="üìà",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # Navega√ß√£o por r√°dio bot√£o na sidebar
    page = st.sidebar.radio(
        "Navega√ß√£o",
        ["Calculadora de Op√ß√µes", "Simula√ß√µes Monte Carlo"],
        index=0
    )

    # Configura√ß√µes comuns na sidebar
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
    periodo = st.sidebar.selectbox(
        "Per√≠odo de dados hist√≥ricos",
        ['1mo', '3mo', '6mo', '1y', '2y', '5y'],
        index=3
    )
    
    n_sim = st.sidebar.slider(
        "N√∫mero de simula√ß√µes",
        min_value=1000,
        max_value=50000,
        value=10000,
        step=1000
    )

    r = st.sidebar.number_input(
        "Taxa livre de risco (% ao ano)",
        min_value=0.0,
        max_value=20.0,
        value=4.0,
        step=0.1
    ) / 100

    ticker = st.sidebar.text_input(
        "Digite o ticker da a√ß√£o (ex: AAPL, ITUB3.SA):",
        value="AAPL"
    )

    # P√°gina Calculadora de Op√ß√µes
    if page == "Calculadora de Op√ß√µes":
        st.markdown("""
        # üéâ Calculadora de Op√ß√µes
        Este aplicativo permite calcular pre√ßos de **Op√ß√µes Europeias** e **Op√ß√µes Asi√°ticas** 
        usando simula√ß√£o Monte Carlo.
        """)

        option_type = st.radio(
            "Selecione o tipo de op√ß√£o:",
            ("Op√ß√£o Europeia", "Op√ß√£o Asi√°tica")
        )

        col1, col2 = st.columns(2)
        with col1:
            strike_percent = st.slider(
                "Strike (% acima/abaixo do pre√ßo atual)",
                min_value=-50,
                max_value=50,
                value=5,
                step=1,
                help="Valores negativos indicam strike abaixo do pre√ßo atual"
            )
        
        with col2:
            tempo_expiracao = st.slider(
                "Tempo at√© expira√ß√£o (anos)",
                min_value=0.1,
                max_value=5.0,
                value=1.0,
                step=0.1
            )

        if st.button("Calcular"):
            try:
                with st.spinner("Calculando..."):
                    S0, mu, sigma, dados = capturar_parametros(ticker, periodo)
                    K = S0 * (1 + strike_percent/100)
                    T = tempo_expiracao

                    # Armazenar par√¢metros no session_state
                    st.session_state['S0'] = S0
                    st.session_state['mu'] = mu
                    st.session_state['sigma'] = sigma
                    st.session_state['dados'] = dados
                    st.session_state['K'] = K
                    st.session_state['T'] = T
                    st.session_state['r'] = r
                    st.session_state['n_sim'] = n_sim
                    st.session_state['ticker'] = ticker
                    st.session_state['option_type'] = option_type

                    if option_type == "Op√ß√£o Europeia":
                        price = monte_carlo_opcao_europeia(S0, K, T, r, sigma, n_sim)
                    else:
                        price = monte_carlo_opcao_asiatica(S0, K, T, r, sigma, n_sim)

                    st.subheader("üìä Resultados")
                    col1, col2, col3, col4 = st.columns(4)
                    col1.metric("Pre√ßo Atual (S0)", f"$ {S0:.2f}")
                    col2.metric("Strike (K)", f"$ {K:.2f}")
                    col3.metric("Volatilidade (œÉ)", f"{sigma:.2%}")
                    col4.metric(f"Pre√ßo da {option_type}", f"$ {price:.2f}")

                    st.subheader("üìà Hist√≥rico de Pre√ßo")
                    fig_hist = plt.figure(figsize=(10, 4))
                    ax_hist = fig_hist.add_subplot(111)
                    dados['Close'].plot(ax=ax_hist)
                    ax_hist.set_title(f"Fechamento Di√°rio - {ticker}")
                    ax_hist.set_xlabel("Data")
                    ax_hist.set_ylabel("Pre√ßo ($)")
                    st.pyplot(fig_hist)
                    plt.close(fig_hist)
                    st.success("C√°lculos conclu√≠dos! Acesse 'Simula√ß√µes Monte Carlo' para visualizar as trajet√≥rias.")

            except Exception as e:
                st.error(f"Erro ao processar: {str(e)}. Verifique o ticker ou a conex√£o com a internet.")
                logger.error(f"Erro na execu√ß√£o: {str(e)}")

    # P√°gina Simula√ß√µes Monte Carlo
    elif page == "Simula√ß√µes Monte Carlo":
        st.title("üöÄ Simula√ß√µes Monte Carlo")
        st.markdown("Visualize as trajet√≥rias simuladas do pre√ßo do ativo. Ajuste o horizonte temporal e o n√∫mero de trajet√≥rias abaixo.")

        if 'S0' not in st.session_state:
            st.warning("Por favor, calcule os par√¢metros na p√°gina 'Calculadora de Op√ß√µes' antes de visualizar as simula√ß√µes.")
            return

        try:
            S0 = st.session_state['S0']
            r = st.session_state['r']
            sigma = st.session_state['sigma']
            n_sim = st.session_state['n_sim']
            ticker = st.session_state['ticker']

            # Slider para ajustar o horizonte temporal
            T = st.slider(
                "Tempo at√© expira√ß√£o (anos)",
                min_value=0.1,
                max_value=5.0,
                value=st.session_state['T'],
                step=0.1,
                help="Ajuste o horizonte temporal da simula√ß√£o (em anos)."
            )
            st.session_state['T'] = T  # Atualizar o session_state

            # Slider para ajustar o n√∫mero de trajet√≥rias exibidas
            n_traj = st.slider(
                "N√∫mero de trajet√≥rias exibidas",
                min_value=1,
                max_value=50,
                value=20,
                step=1,
                help="Escolha quantas trajet√≥rias deseja exibir no gr√°fico (m√°ximo 50)."
            )

            st.write(f"Exibindo simula√ß√µes para o ticker: **{ticker}**")
            st.write(f"Exibindo {n_traj} de {min(n_sim, 100)} trajet√≥rias simuladas.")

            with st.spinner("Gerando simula√ß√µes Monte Carlo..."):
                fig_sim = plot_trajetorias(S0, T, r, sigma, n_sim=min(n_sim, 100), n_traj=n_traj)
                st.pyplot(fig_sim)
                plt.close(fig_sim)
                logger.info("Gr√°fico Monte Carlo renderizado com sucesso.")
                st.success("Simula√ß√µes Monte Carlo geradas com sucesso!")

        except Exception as e:
            st.error(f"Erro ao gerar simula√ß√µes: {str(e)}")
            logger.error(f"Erro na renderiza√ß√£o do gr√°fico Monte Carlo: {str(e)}")

if __name__ == "__main__":
    main()