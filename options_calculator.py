import streamlit as st
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from typing import Tuple
import logging
import re

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def capturar_parametros(ticker: str, periodo: str = '1y') -> Tuple[float, float, float, pd.DataFrame]:
    """
    Captura par√¢metros do ativo usando dados hist√≥ricos do Yahoo Finance.
    
    Args:
        ticker: S√≠mbolo da a√ß√£o (ex: AAPL, ITUB3.SA)
        periodo: Per√≠odo de dados hist√≥ricos (default: '1y')
    
    Returns:
        Tuple contendo (pre√ßo atual, retorno m√©dio, volatilidade, dados hist√≥ricos)
    """
    if not ticker or not re.match(r'^[A-Z0-9.]+$', ticker):
        raise ValueError("Ticker inv√°lido. Use formato como 'AAPL' ou 'ITUB3.SA'.")
    
    try:
        dados = yf.download(ticker, period=periodo)
        if dados.empty:
            raise ValueError(f"Nenhum dado encontrado para o ticker {ticker}")
            
        dados['Retornos'] = dados['Close'].pct_change().apply(np.log1p)
        dados = dados.dropna()
        
        S0 = dados['Close'].iloc[-1].item()
        mu = dados['Retornos'].mean() * 252
        sigma = dados['Retornos'].std() * np.sqrt(252)
        
        return S0, mu, sigma, dados
    except Exception as e:
        logger.error(f"Erro ao capturar par√¢metros: {str(e)}")
        raise

def monte_carlo_opcao_europeia(
    S0: float, 
    K: float, 
    T: float, 
    r: float, 
    sigma: float, 
    n_sim: int = 10000
) -> float:
    """
    Calcula o pre√ßo de uma op√ß√£o europeia usando simula√ß√£o Monte Carlo.
    
    Args:
        S0: Pre√ßo atual do ativo
        K: Pre√ßo de exerc√≠cio
        T: Tempo at√© expira√ß√£o (em anos)
        r: Taxa livre de risco
        sigma: Volatilidade
        n_sim: N√∫mero de simula√ß√µes
    
    Returns:
        Pre√ßo estimado da op√ß√£o
    """
    Z = np.random.standard_normal(n_sim)
    ST = S0 * np.exp((r - 0.5 * sigma ** 2) * T + sigma * np.sqrt(T) * Z)
    payoff = np.maximum(ST - K, 0)
    return np.exp(-r * T) * np.mean(payoff)

def monte_carlo_opcao_asiatica(
    S0: float, 
    K: float, 
    T: float, 
    r: float, 
    sigma: float, 
    n_sim: int = 10000, 
    n_steps: int = 252
) -> float:
    """
    Calcula o pre√ßo de uma op√ß√£o asi√°tica usando simula√ß√£o Monte Carlo.
    
    Args:
        S0: Pre√ßo atual do ativo
        K: Pre√ßo de exerc√≠cio
        T: Tempo at√© expira√ß√£o (em anos)
        r: Taxa livre de risco
        sigma: Volatilidade
        n_sim: N√∫mero de simula√ß√µes
        n_steps: N√∫mero de passos na simula√ß√£o
    
    Returns:
        Pre√ßo estimado da op√ß√£o
    """
    dt = T / n_steps
    Z = np.random.normal(size=(n_sim, n_steps))
    prices = S0 * np.exp(np.cumsum((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z, axis=1))
    media = np.mean(prices, axis=1)
    payoffs = np.maximum(media - K, 0)
    return np.exp(-r * T) * np.mean(payoffs)

def main():
    """P√°gina principal para entrada de par√¢metros e c√°lculo de pre√ßos."""
    st.set_page_config(
        page_title="Calculadora de Op√ß√µes",
        page_icon="üìà",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    st.markdown("""
    # üéâ Calculadora de Op√ß√µes
    Este aplicativo permite calcular pre√ßos de **Op√ß√µes Europeias** e **Op√ß√µes Asi√°ticas** 
    usando simula√ß√£o Monte Carlo. Use a barra lateral para configurar os par√¢metros e 
    navegue at√© a p√°gina "Simula√ß√µes Monte Carlo" para visualizar as trajet√≥rias.
    """)

    # Sidebar com configura√ß√µes
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
    periodo = st.sidebar.selectbox(
        "Per√≠odo de dados hist√≥ricos",
        ['1mo', '3mo', '6mo', '1y', '2y', '5y'],
        index=3
    )
    
    n_sim = st.sidebar.slider(
        "N√∫mero de simula√ß√µes",
        min_value=1000,
        max_value=50000,
        value=10000,
        step=1000
    )

    r = st.sidebar.number_input(
        "Taxa livre de risco (% ao ano)",
        min_value=0.0,
        max_value=20.0,
        value=4.0,
        step=0.1
    ) / 100

    # Sele√ß√£o de tipo de op√ß√£o e ticker
    option_type = st.radio(
        "Selecione o tipo de op√ß√£o:",
        ("Op√ß√£o Europeia", "Op√ß√£o Asi√°tica")
    )

    ticker = st.text_input(
        "Digite o ticker da a√ß√£o (ex: AAPL para EUA, ITUB3.SA para Brasil):",
        value="AAPL"
    )

    # Par√¢metros da op√ß√£o
    col1, col2 = st.columns(2)
    with col1:
        strike_percent = st.slider(
            "Strike (% acima/abaixo do pre√ßo atual)",
            min_value=-50,
            max_value=50,
            value=5,
            step=1,
            help="Valores negativos indicam strike abaixo do pre√ßo atual"
        )
    
    with col2:
        tempo_expiracao = st.slider(
            "Tempo at√© expira√ß√£o (anos)",
            min_value=0.1,
            max_value=5.0,
            value=1.0,
            step=0.1
        )

    if st.button("Calcular"):
        try:
            with st.spinner("Calculando..."):
                S0, mu, sigma, dados = capturar_parametros(ticker, periodo)
                K = S0 * (1 + strike_percent/100)
                T = tempo_expiracao

                # Armazenar par√¢metros no session_state para a p√°gina Monte Carlo
                st.session_state['S0'] = S0
                st.session_state['mu'] = mu
                st.session_state['sigma'] = sigma
                st.session_state['dados'] = dados
                st.session_state['K'] = K
                st.session_state['T'] = T
                st.session_state['r'] = r
                st.session_state['n_sim'] = n_sim
                st.session_state['ticker'] = ticker
                st.session_state['option_type'] = option_type

                if option_type == "Op√ß√£o Europeia":
                    price = monte_carlo_opcao_europeia(S0, K, T, r, sigma, n_sim)
                else:
                    price = monte_carlo_opcao_asiatica(S0, K, T, r, sigma, n_sim)

                # Apresenta√ß√£o dos resultados
                st.subheader("üìä Resultados")
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("Pre√ßo Atual (S0)", f"$ {S0:.2f}")
                col2.metric("Strike (K)", f"$ {K:.2f}")
                col3.metric("Volatilidade (œÉ)", f"{sigma:.2%}")
                col4.metric(f"Pre√ßo da {option_type}", f"$ {price:.2f}")

                # Gr√°fico de hist√≥rico de pre√ßo
                st.subheader("üìà Hist√≥rico de Pre√ßo")
                fig_hist = plt.figure(figsize=(10, 4))
                ax_hist = fig_hist.add_subplot(111)
                dados['Close'].plot(ax=ax_hist)
                ax_hist.set_title(f"Fechamento Di√°rio - {ticker}")
                ax_hist.set_xlabel("Data")
                ax_hist.set_ylabel("Pre√ßo ($)")
                st.pyplot(fig_hist)
                plt.close(fig_hist)
                st.success("C√°lculos conclu√≠dos! Acesse a p√°gina 'Simula√ß√µes Monte Carlo' na barra lateral para ver as trajet√≥rias e ajustar o horizonte temporal, se desejar.")

        except Exception as e:
            st.error(f"Erro ao processar: {str(e)}. Verifique o ticker ou a conex√£o com a internet.")
            logger.error(f"Erro na execu√ß√£o: {str(e)}")

if __name__ == "__main__":
    main()